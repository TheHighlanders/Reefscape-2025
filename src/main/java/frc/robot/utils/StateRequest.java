package frc.robot.utils;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Map;
import java.lang.reflect.Field;
import frc.robot.subsystems.Superstructure;

//--------------------------------------------------------------------------//
//                 DO NOT EDIT THIS FILE UNLESS YOU ARE LEX                 //
//--------------------------------------------------------------------------//

public class StateRequest {
    private static Superstructure superstructure;
    private static final StateRequestHandler handler = new StateRequestHandler();

    public static void init(Superstructure superstructure) {
        StateRequest.superstructure = superstructure;
    }

    private static class StateRequestHandler implements InvocationHandler {
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) {
            if (superstructure == null) {
                throw new RuntimeException("StateRequest not initialized. Call StateRequest.init() first");
            }

            Class<?> stateType = args[0].getClass();
            StateHandler<?> handler = superstructure.handlers.get(stateType);

            if (args[0].getClass().isInstance(handler.getGoal().desired)) {
                @SuppressWarnings("unchecked")
                StateHandler<Object> typedHandler = (StateHandler<Object>) handler;
                typedHandler.getGoal().updateState(args[0]);
            }

            return proxy;
        }

        private void updateState(Class<?> stateType, Object state) {
            try {
                Field handlersField = Superstructure.class.getDeclaredField("handlers");
                handlersField.setAccessible(true);
                Object handlersObj = handlersField.get(superstructure);

                if (handlersObj instanceof Map<?, ?> handlers) {
                    StateHandler<?> handler = (StateHandler<?>) handlers.get(stateType);
                    if (handler != null && stateType.isInstance(state)) {
                        @SuppressWarnings("unchecked")
                        StateHandler<Object> typedHandler = (StateHandler<Object>) handler;
                        typedHandler.getGoal().updateState(state);
                    }
                }
            } catch (Exception e) {
                throw new RuntimeException(
                        "Failed to update state, this is likley due to improper naming conventions in the superstructure",
                        e);
            }
        }

    }

    public static IStateRequest create(Object state) {
        IStateRequest request = (IStateRequest) Proxy.newProxyInstance(
                StateRequest.class.getClassLoader(),
                new Class<?>[] { IStateRequest.class },
                handler);
        handler.updateState(state.getClass(), state);
        return request;
    }
}