package frc.robot.utils;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Map;
import java.lang.reflect.Field;
import frc.robot.subsystems.Superstructure;

//--------------------------------------------------------------------------//
//                 DO NOT EDIT THIS FILE UNLESS YOU ARE LEX                 //
//--------------------------------------------------------------------------//

public class StateRequest {
    private static Superstructure superstructure;
    private static final StateRequestHandler handler = new StateRequestHandler();

    public static void init(Superstructure superstructure) {
        StateRequest.superstructure = superstructure;
    }

    public static <T extends Enum<T>> void addOneWayExclusion(T fromState, T... excludedStates) {
        if (superstructure == null) {
            throw new RuntimeException("StateRequest not initialized. Call StateRequest.init() first");
        }

        StateHandler<?> handlerA = superstructure.handlers.get(fromState.getClass());

        if (handlerA != null) {
            @SuppressWarnings("unchecked")
            StateHandler<T> typedHandlerA = (StateHandler<T>) handlerA;
            for (T excludedState : excludedStates) {
                typedHandlerA.addOneWayExclusion(fromState, excludedState);
            }
        }
    }

    public static <T extends Enum<T>> void addTwoWayExclusion(T fromState, T... otherStates) {
        if (superstructure == null) {
            throw new RuntimeException("StateRequest not initialized. Call StateRequest.init() first");
        }

        for (T otherState : otherStates) {
            StateHandler<?> handlerA = superstructure.handlers.get(fromState.getClass());
            StateHandler<?> handlerB = superstructure.handlers.get(otherState.getClass());

            if (handlerA != null && handlerB != null) {
                @SuppressWarnings("unchecked")
                StateHandler<T> typedHandlerA = (StateHandler<T>) handlerA;
                @SuppressWarnings("unchecked")
                StateHandler<T> typedHandlerB = (StateHandler<T>) handlerB;

                typedHandlerA.addOneWayExclusion(fromState, otherState);
                typedHandlerB.addOneWayExclusion(otherState, fromState);
            }
        }
    }

    private static class StateRequestHandler implements InvocationHandler {
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) {
            if (superstructure == null) {
                throw new RuntimeException("StateRequest not initialized. Call StateRequest.init() first");
            }

            updateStateWithType(args[0]);
            return proxy;
        }

        private <T extends Enum<T>> void updateStateWithType(Object stateObj) {
            @SuppressWarnings("unchecked")
            T state = (T) stateObj;
            Class<T> stateType = (Class<T>) state.getClass();

            StateHandler<T> handler = (StateHandler<T>) superstructure.handlers.get(stateType);
            if (handler != null) {
                handler.getSubsystemStates().updateState(state);
            }
        }

        private <T extends Enum<T>> void updateState(Class<T> stateType, T state) {
            try {
                Field handlersField = Superstructure.class.getDeclaredField("handlers");
                handlersField.setAccessible(true);
                Object handlersObj = handlersField.get(superstructure);

                if (handlersObj instanceof Map<?, ?> handlers) {
                    @SuppressWarnings("unchecked")
                    StateHandler<T> handler = (StateHandler<T>) handlers.get(stateType);
                    if (handler != null) {
                        handler.getSubsystemStates().updateState(state);
                    }
                }
            } catch (Exception e) {
                throw new RuntimeException("Failed to update state", e);
            }
        }

    }

    public static <T extends Enum<T>> IStateRequest create(T state) {
        IStateRequest request = (IStateRequest) Proxy.newProxyInstance(
                StateRequest.class.getClassLoader(),
                new Class<?>[] { IStateRequest.class },
                handler);
        handler.updateStateWithType(state);
        return request;
    }

}