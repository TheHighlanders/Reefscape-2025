package frc.robot.utils;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import java.lang.reflect.Field;
import frc.robot.subsystems.Superstructure;

//--------------------------------------------------------------------------//
//                 DO NOT EDIT THIS FILE UNLESS YOU ARE LEX                 //
//--------------------------------------------------------------------------//

public class StateRequest {
    private static Superstructure superstructure;
    private static final StateRequestHandler handler = new StateRequestHandler();

    public static void init(Superstructure superstructure) {
        StateRequest.superstructure = superstructure;
    }

    private static class StateRequestHandler implements InvocationHandler {
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) {
            if (superstructure == null) {
                throw new RuntimeException("StateRequest not initialized. Call StateRequest.init() first");
            }

            // String methodName = method.getName();
            Class<?> stateType = args[0].getClass();

            updateState(stateType, args[0]);
            return proxy;
        }

        private void updateState(Class<?> stateType, Object state) {
            try {
                String typeName = stateType.getSimpleName().toLowerCase();
                String fieldName = typeName.substring(0, typeName.length() - 5) + "Goal";
                Field goalField = Superstructure.class.getField(fieldName);
                Object goal = goalField.get(superstructure);

                Method updateStateMethod = goal.getClass().getDeclaredMethod("updateState", Object.class);
                updateStateMethod.invoke(goal, state);
            } catch (Exception e) {
                throw new RuntimeException(
                        "Failed to update state, this is likley due to improper naming conventions in the superstructure",
                        e);
            }
        }

    }

    public static IStateRequest create(Object state) {
        IStateRequest request = (IStateRequest) Proxy.newProxyInstance(
                StateRequest.class.getClassLoader(),
                new Class<?>[] { IStateRequest.class },
                handler);
        handler.updateState(state.getClass(), state);
        return request;
    }
}